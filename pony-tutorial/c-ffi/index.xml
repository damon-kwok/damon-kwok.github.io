<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>概述（Overview） on Pony 教程</title>
    <link>https://damon-kwok.github.io/pony-tutorial/c-ffi.html</link>
    <description>Recent content in 概述（Overview） on Pony 教程</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    
	<atom:link href="https://damon-kwok.github.io/pony-tutorial/c-ffi/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>C ABI</title>
      <link>https://damon-kwok.github.io/pony-tutorial/c-ffi/c-abi.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://damon-kwok.github.io/pony-tutorial/c-ffi/c-abi.html</guid>
      <description>The FFI support in Pony uses the C application binary interface (ABI) to interface with native code. The C ABI is a calling convention, one of many, that allow objects from different programming languages to be used together.
Writing a C library for Pony Writing your own C library for use by Pony is almost as easy as using existing libraries.
Let&amp;rsquo;s look at a complete example of a C function we may wish to provide to Pony.</description>
    </item>
    
    <item>
      <title>Callbacks</title>
      <link>https://damon-kwok.github.io/pony-tutorial/c-ffi/callbacks.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://damon-kwok.github.io/pony-tutorial/c-ffi/callbacks.html</guid>
      <description>Some C APIs let the programmer specify functions that should be called to do pieces of work. For example, the SQLite API has a function called sqlite3_exec that executes an SQL statement and calls a function given by the programmer on each row returned by that statement. The functions that are supplied by the programmer are known as &amp;ldquo;callback functions&amp;rdquo;. Some specific Pony functions can be passed as callback functions.</description>
    </item>
    
    <item>
      <title>Calling C from Pony</title>
      <link>https://damon-kwok.github.io/pony-tutorial/c-ffi/calling-c.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://damon-kwok.github.io/pony-tutorial/c-ffi/calling-c.html</guid>
      <description>FFI is built into Pony and native libraries may be directly referenced in Pony code. There is no need to code or configure bindings, wrappers or interfaces.
Here&amp;rsquo;s an example of an FFI call in Pony from the standard library. It looks like a normal method call, with just a few differences:
@fwrite[U64](data.cstring(), U64(1), data.size(), _handle) The main difference is the @ symbol before the function name. This is what tells us it&amp;rsquo;s an FFI call.</description>
    </item>
    
    <item>
      <title>Linking to C Libraries</title>
      <link>https://damon-kwok.github.io/pony-tutorial/c-ffi/linking-c.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://damon-kwok.github.io/pony-tutorial/c-ffi/linking-c.html</guid>
      <description>If Pony code calls FFI functions, then those functions, or rather the libraries containing them, must be linked into the Pony program.
Use for external libraries To link an external library to Pony code another variant of the use command is used. The &amp;ldquo;lib&amp;rdquo; specifier is used to tell the compiler you want to link to a library. For example:
use &amp;quot;lib:foo&amp;quot; As with other use commands a condition may be specified.</description>
    </item>
    
  </channel>
</rss>