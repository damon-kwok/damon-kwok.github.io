<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>概述（Overview） on Pony 教程</title>
    <link>https://tutorial.ponylang.io/gotchas.html</link>
    <description>Recent content in 概述（Overview） on Pony 教程</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    
	<atom:link href="https://tutorial.ponylang.io/gotchas/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Divide by Zero</title>
      <link>https://tutorial.ponylang.io/gotchas/divide-by-zero.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tutorial.ponylang.io/gotchas/divide-by-zero.html</guid>
      <description>What&amp;rsquo;s 1 divided by 0? How about 10 divided by 0? What is the result you get in your favorite programming language?
In math, divide by zero is undefined. There is no answer to that question as the expression 1/0 has no meaning. In many programming languages, the answer is a runtime exception that the user has to handle. In Pony, things are a bit different.
Divide by zero in Pony In Pony, integer division by zero results in zero.</description>
    </item>
    
    <item>
      <title>Function Call Side Effects</title>
      <link>https://tutorial.ponylang.io/gotchas/side-effect-ordering-in-function-call-expressions.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tutorial.ponylang.io/gotchas/side-effect-ordering-in-function-call-expressions.html</guid>
      <description>Consider the following code:
class Foo fun fn(x: U64) =&amp;gt; None actor Main new create(env: Env) =&amp;gt; var x: U64 = 0 try foo()?.fn(x = 42) end env.out.print(x.string()) fun foo(): Foo ? =&amp;gt; error What do you think it will print? Probably 0 right? Or maybe you realized this code is in the gotchas section so it must be 42. If you went with 42, you&amp;rsquo;d be right. Why?
Expressions for arguments in function calls are evaluated before the expression for the function receiver.</description>
    </item>
    
    <item>
      <title>Garbage Collection</title>
      <link>https://tutorial.ponylang.io/gotchas/garbage-collection.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tutorial.ponylang.io/gotchas/garbage-collection.html</guid>
      <description>There&amp;rsquo;s a common GC anti-pattern that many new Pony programmers accidentally stumble across. Usually, this results in a skyrocketing memory usage in their test program and questions on Zulip as to why Pony isn&amp;rsquo;t working correctly. It is, in fact, working correctly, albeit not obviously.
Garbage Collection in the world at large Garbage collection, in most languages, can run at any time. Your program can be paused so that memory can be freed up.</description>
    </item>
    
    <item>
      <title>Recursion</title>
      <link>https://tutorial.ponylang.io/gotchas/recursion.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tutorial.ponylang.io/gotchas/recursion.html</guid>
      <description>Recursive functions in Pony can cause many problems. Every function call in a program adds a frame on the system call stack, which is bounded. If the stack grows too big it will overflow, usually crashing the program. This is an out-of-memory type of error and it cannot be prevented by the guarantees offered by Pony.
If you have a heavy recursive algorithm, you must take some precautions in your code to avoid stack overflows.</description>
    </item>
    
    <item>
      <title>Scheduling</title>
      <link>https://tutorial.ponylang.io/gotchas/scheduling.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tutorial.ponylang.io/gotchas/scheduling.html</guid>
      <description>The Pony scheduler is not preemptive. This means that your actor has to yield control of the scheduler thread in order for another actor to execute. The normal way to do this is for your behavior to end. If your behavior doesn&amp;rsquo;t end, you will continue to monopolize a scheduler thread and bad things will happen.
FFI and monopolizing the scheduler An easy way to monopolize a scheduler thread is to use the FFI facilities of Pony to kick off code that doesn&amp;rsquo;t return for an extended period of time.</description>
    </item>
    
  </channel>
</rss>