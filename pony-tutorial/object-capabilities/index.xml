<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>概述（Overview） on Pony 教程</title>
    <link>https://damon-kwok.github.io/object-capabilities.html</link>
    <description>Recent content in 概述（Overview） on Pony 教程</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    
	<atom:link href="https://damon-kwok.github.io/object-capabilities/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Trust Boundary</title>
      <link>https://damon-kwok.github.io/object-capabilities/trust-boundary.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://damon-kwok.github.io/object-capabilities/trust-boundary.html</guid>
      <description>We mentioned previously that the C FFI can be used to break pretty much every guarantee that Pony makes. This is because, once you&amp;rsquo;ve called into C, you are executing arbitrary machine code that can stomp memory addresses, write to anything, and generally be pretty badly behaved.
Trust boundaries When we talk about trust, we don&amp;rsquo;t mean things you trust because you think they are perfect. Instead, we mean things you have to trust in order to get things done, even though you know they are imperfect.</description>
    </item>
    
    <item>
      <title>对象权能模型（Object Capabilities）</title>
      <link>https://damon-kwok.github.io/object-capabilities/object-capabilities.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://damon-kwok.github.io/object-capabilities/object-capabilities.html</guid>
      <description>Pony的类型安装系统是构建在对象权能模型的理论基础上的。感觉上很复杂，但是其实非常简单优雅，这是对象权能模型的核心概念：
 A capability is an unforgeable token that (a) designates an object and (b) gives the program the authority to perform a specific set of actions on that object.
 So what&amp;rsquo;s that token? It&amp;rsquo;s an address. A pointer. A reference. It&amp;rsquo;s just&amp;hellip; an object.
How is that unforgeable? Since Pony has no pointer arithmetic and is both type-safe and memory-safe, object references can&amp;rsquo;t be &amp;ldquo;invented&amp;rdquo; (i.e. forged) by the program.</description>
    </item>
    
  </channel>
</rss>