<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>概述（Overview） on Pony 教程</title>
    <link>https://damon-kwok.github.io/pony-tutorial/object-capabilities.html</link>
    <description>Recent content in 概述（Overview） on Pony 教程</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    
	<atom:link href="https://damon-kwok.github.io/pony-tutorial/object-capabilities/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>对象权能模型（Object Capabilities）</title>
      <link>https://damon-kwok.github.io/pony-tutorial/object-capabilities/object-capabilities.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://damon-kwok.github.io/pony-tutorial/object-capabilities/object-capabilities.html</guid>
      <description>Pony的类型安装系统是构建在对象权能模型的理论基础上的。感觉上很复杂，但是其实非常简单优雅，这是对象权能模型的核心概念：
 权能是一个不可伪造的令牌，它(a)指定一个对象，(b)授予程序对该对象执行特定操作集的权限。
 那代币是什么?这是一个地址。一个指针。一个引用。它只是&amp;hellip;一个对象。
这怎么可能是不可伪造的呢? 由于Pony没有指针算法，并且是类型安全的，内存安全的，对象引用不能被程序“发明”(即伪造)。您只能通过构造一个对象或传递一个对象来获得一个。
那么C FFI呢? 使用C FFI可以打破这一约束限制。稍后我们将讨论 C FFI trust boundary 。
那么全局变量呢? 他们是坏的!因为您可以在不构造它们或不传递它们的情况下获得它们。
全局变量是所谓的 ambient authority 的一种形式。环境权限的另一种形式是不受约束地访问文件系统。
Pony没有全局变量，也没有全局函数。这并不意味着所有的环境权限都神奇地消失了——例如，我们仍然需要注意文件系统。没有全局权限对于消除环境权限是必要的，但还不够。
这有什么用呢? 与使用权限列表、访问控制列表或其他形式的安全性不同，对象-功能模型意味着，如果您有对某个对象的引用，则可以使用该对象进行操作。简单而有效的。
有一篇关于对象-能力模型如何工作的好论文，读起来很容易:
权能梦碎——对象权能模型跌落神坛
权能和并发 对象功能模型本身并不处理并发性。它明确了如果同时访问一个对象将会发生什么，但是没有规定控制这个对象的单一方法。
将功能与角色模型相结合是一个良好的开端，以前已经在E和Joule等语言中实现过。
Pony做到了这一点，并在类型系统中使用了一个_reference功能的系统。</description>
    </item>
    
    <item>
      <title>边界信任（Trust Boundary）</title>
      <link>https://damon-kwok.github.io/pony-tutorial/object-capabilities/trust-boundary.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://damon-kwok.github.io/pony-tutorial/object-capabilities/trust-boundary.html</guid>
      <description>我们之前提到过，C FFI可以用来打破Pony做出的几乎所有约束限制。这是因为，一旦调用了C语言，就可能会执行任意的机器码，这些代码会破坏内存地址、修改任何数据，而且通常表现得非常糟糕。
边界信任 当我们谈论信任的时候，我们并不是指你相信的事情，因为你认为它们是完美的。相反，我们指的是那些你必须信任才能完成的事情，即使你知道它们是不完美的。
在Pony中，当你使用C FFI时，你基本上是在声明你相信正在执行的C代码。这很好，因为你可能需要它来完成工作。但是信任别人的代码来使用cffi呢?你可能需要知道，但你肯定想知道它正在发生。
安全包 处理这个问题的常规方法是确保您只使用了程序中需要使用的代码。很简单!不要使用一些随机的包从互联网上没有看到的代码，并确保它不会做令人讨厌的FFI的东西。
但我们可以做得更好。
在Pony中，你可以选择在‘ponyc’命令行上声明一组_safe_包，就像这样:
ponyc --safe=files:net:net/ssl my_project 这里，我们声明只有“文件”、“net”和“net/ssl”包才允许使用C FFI调用。我们已经建立了信任边界:任何其他试图使用C FFI调用的包都会导致编译时错误。</description>
    </item>
    
  </channel>
</rss>